[ { "title": "Testing & Results", "url": "/posts/testing/", "categories": "pdf-service", "tags": "jest, unit-test, sample-pdf, e2e", "date": "2022-07-08 00:00:00 -0700", "snippet": "SetupI use jest for all my unit tests and end-to-end test.In the package.json add\"scripts\": {\"test\": \"jest --config ./test/unit-test/jest-unit.json\",\"test:e2e\": \"jest --config ./test/e2e-test/jest-e2e.json\"}There are few critical techniques I used: I do not use any mockup in my test, instead, I use the same PDF Generator engine but feed reference test data. So the port of testing should be configurable to accommodate multiple tests being run. I also create a set of input data , those JSON structure in POST Body as reference data. I created an intermediate step to capture the HTML form Handlebars just before it is sent to puppeteer/Chromium . The generated HTML is compared with the input with their checksums. Belows are couple tests in one of the unit test file:const port = 3004const url = `http://localhost:${port}`;describe(\"pdf content tests\", () =&gt; { beforeAll(async () =&gt; { bootstrap(port); }); beforeEach(async () =&gt; { }); it(\"test1\", () =&gt; { jest.setTimeout(7000) return request(url) .post(\"/pdf\") .set(\"path\", \"sales.invoice.v1\") .set(\"accept-language\", \"en-us\") .set(\"my-tz\", \"America/Los_Angeles\") .set(\"my-$\", \"USD\") .set(\"Content-Type\", \"application/json\") .set(\"now\", \"2021-10-05T00:00:00Z\") .send(input_data) .expect((res) =&gt; { expect(res.headers[\"html-hash\"]).toBe(\"2a43bc2c6d9861e15373d45b22036bfe49230932\") }) .expect(HttpStatus.CREATED); }); it(\"test2\", () =&gt; { jest.setTimeout(7000) return request(url) .post(\"/pdf\") .set(\"path\", \"sales.invoice.v1\") .set(\"accept-language\", \"es-es\") .set(\"my-tz\", \"America/Los_Angeles\") .set(\"my-$\", \"USD\") .set(\"Content-Type\", \"application/json\") .set(\"now\", \"2021-10-05T00:00:00Z\") .send(input_data) .expect((res) =&gt; { expect(res.headers[\"html-hash\"]).toBe(\"0e05057b6a07c098db5a7f27fe4170436a010f76\") }) .expect(HttpStatus.CREATED); }); ...}The output of my unit test suites :—Example AIn US currency, PDT, and en-usExample BIn Euro currency, EST, and es-es" }, { "title": "Scalability", "url": "/posts/scale/", "categories": "pdf-service", "tags": "node, thread, scale, docker, deployment, kubernetes, worker-thread, libuv, database-driver, event-loop, non-block, async", "date": "2022-07-07 00:00:00 -0700", "snippet": "How Node application scale Node is a hybrid when it comes to concurrency. At the programmer level it is a single threaded model utilizing system event loops and non-blocking IO to handle larger number of requests. When a request comes in, the event is put into the system event queue. Then the request will be put to sleep. Meanwhile the main thread can take other request or process the event waiting to be process. When a particular request’s work is done, the sleeping request will be woken up by the main thread. However, Node also use libuv library which has a multi-thread pool. Certain computation Node can decide to use this library to take advantage of the multi-threading capability, but programmers have no control. Most database drivers that are written in lower level language can also be multi-threaded. Newer version of Node also start to support the Worker threads model.— Best Practice for Node scalability Node application is very light way compare to other runtime systems. It is a conventional practice now to package and deploy Node’s application in docker. In turns we can deploy a massive number of these docker wrapped application in the Cloud such as using Kubernetes . PDF Generator is even more well suited for this type of deployment because it is stateless. The context of the application is captured in each HTTP request memory space. Thus, it can support thousands or tens of thousands of concurrent call when adequate number of docker images are deployed. " }, { "title": "Localization, PDF-Footer", "url": "/posts/i18n/", "categories": "pdf-service", "tags": "localization, i18n, handlebars, language-file", "date": "2022-07-06 00:00:00 -0700", "snippet": "LocalizationOne of the more difficult task is to setup multi-lingo support for the PDF Generator while at the same time work with the Handlebars template engine. There is not a lot of documentation around to illustrate it.SetupAt the bootstrapping function of Node, we import i18n and configure as follows:import * as i18n from 'i18n';export async function bootstrap(port?: number) { i18n.configure({ locales: ['en-us', 'es-us', 'es-es'], directory: join(__dirname, '/', 'i18n'), defaultLocale: 'en-us', queryParameter: 'lang', }); ...}Language files.You can designated a director where each language file will resides using the same handle. For example, the file en-us.json{\t\"DATE\": \"Date\",\t\"QUANTITY\": \"QUANTITY\",\t\"SUBTOTAL\": \"SUBTOTAL\",\t\"TAX\": \"Tax\",\t\"INVOICE#\": \"Invoice #: %s\",\t\"ROGER_SHOP\": \"Roger's Tennis Shop\",\t\"SLOGAN\": \"Play to win!\",\t\"DESCRIPTION\": \"DESCRIPTION\",\t\"UNIT-PRICE\": \"UNIT PRICE\",\t\"TOTAL\": \"TOTAL\",\t\"SALES TAX\": \"SALES TAX\",\t\"SHIPPING-HANDLING\": \"SHIPPING &amp; HANDLING\",\t\"TOTAL-DUE\": \"TOTAL DUE\",\t\"PHONE\": \"Phone: %s\",\t\"FAX\": \"Fax: %s\",\t\"INVOICE\": \"INVOICE\",\t\"TO\": \"TO\",\t\"SHIP-TO\": \"SHIP TO\",\t\"INSTRUCTIONS\": \"special instructions\",\t\"FOOTER\": \"Thanks for shopping from Roger!\",\t\"SALES-TAX\": \"SALES-TAX\"}Where es-es.json{\t\"DATE\": \"Fecha\",\t\"QUANTITY\": \"CANTIDAD\",\t\"SUBTOTAL\": \"TOTAL PARCIAL\",\t\"TAX\": \"Impuesto\",\t\"FOOTER\": \"¡Gracias por comprarle a Roger!\",\t\"INVOICE#\": \"Factura #: %s\",\t\"ROGER_SHOP\": \"Tienda de tenis de Roger\",\t\"SLOGAN\": \"¡Jugar para ganar!\",\t\"DESCRIPTION\": \"DESCRIPCIÓN\",\t\"UNIT-PRICE\": \"PRECIO UNITARIO\",\t\"TOTAL\": \"TOTAL\",\t\"SALES TAX\": \"IMPUESTO DE VENTA\",\t\"SHIPPING-HANDLING\": \"ENVÍO Y MANEJO\",\t\"TOTAL-DUE\": \"TOTAL DEBIDO\",\t\"PHONE\": \"Teléfono: %s\",\t\"FAX\": \"Fax: %s\",\t\"INVOICE\": \"FACTURA\",\t\"TO\": \"Enviado a\",\t\"SHIP-TO\": \"ENVIE A\",\t\"INSTRUCTIONS\": \"instrucciones especiales\",\t\"SALES-TAX\": \"SALES-TAX\"}Perhaps the least documented but critical link between i18N and Handlebars is creating the translation helper function _t for use throughout the template engine. Where you have to pass a json tree containing what i18N library needs.function _t(...args) { let options = args.pop(); return I18n.__.apply(root, args);};PDF FooterEvery document will have different footer requirements. It is not as easy to customize puppeteer, but I have make the footer customizable at each document level. In fact, I parameterize PDF print format, header, footer and margin to be settable by the document.const buffer = await page.pdf({ format: pdfConfig.format, displayHeaderFooter: pdfConfig.isHeadFoot, headerTemplate: pdfConfig.header, footerTemplate: pdfConfig.footer, margin: pdfConfig.margin, });Remember back in Step 2, we use the Interceptor activation to load document specific helper function. We can also use this opportunity to override an context extension function to provide document specific configuration.export default async function extend(ctx: ExtContext) { //pdf configration ctx.data()[Sys.pdfConfig] = { format: \"legal\", isHeadFoot: true, header: '&lt;span&gt;&lt;/span&gt;', footer: \"&lt;div style='text-align:right; width: 100%; font-size: 9px; padding: 5px 5px 0; color: #bbb; position: relative;'&gt;&lt;span class='pageNumber'&gt;&lt;/span&gt; / &lt;span class='totalPages'&gt;&lt;/span&gt;&lt;/div&gt;\", margin: { left: '10mm', right: '10mm', top: '10mm', bottom: '10mm' } }}" }, { "title": "Controller, Browser Page Pool, Puppeteer , Exception Filter", "url": "/posts/step-6-9/", "categories": "pdf-service", "tags": "pdf-controller, browser-page-pool, puppeteer, exception-filter", "date": "2022-07-05 00:00:00 -0700", "snippet": "Step 6 ControllerThe heart of he PDF Generator is driven by the PDF Controller. In Nest.js , you use annotation to designate a function as a controller where HTTP request will be routed to. You can see all the decorators we mentioned before are used either on the class or the method or the parameters of the Controller.@UseGuards(JwtAuthGuard)@UseGuards(HeaderGuard)@UseInterceptors(ExtInterceptor)@Controller(\"pdf\")export class PdfController { constructor() { } @Post() @UseFilters(AllExFilter) @ApiCreatedResponse({ description: \"PDF file has been generated\" }) @ApiHeaders(API_HEADERS) @ApiBody({ type: RootDataDto }) async genPdf( @Req() req: Request, @Res() res: Response, @Body(BodyPipe) body, @HbsCompile() compiledHtml ) { .... const convertPdf = async (page) =&gt; { await page.setContent(compiledHtml); const pdfConfig = req.body.data[Sys.pdfConfig]; const buffer = await page.pdf({ format: pdfConfig.format, displayHeaderFooter: pdfConfig.isHeadFoot, headerTemplate: pdfConfig.header, footerTemplate: pdfConfig.footer, margin: pdfConfig.margin, }); return buffer; } const pdfBuffer = await BROWSER_PAGE_POOL.getPdfBuffer(convertPdf); res.set({ \"Content-Type\": \"application/pdf\", \"Content-Disposition\": `attachment; filename=${req.headers[\"pdf-filename\"]}`, \"Content-Length\": pdfBuffer.length, \"Performance\": req.body.data[Sys.perf], \"Html-hash\": sha1(compiledHtml), \"Cache-Control\": \"no-cache, no-store, must-revalidate\", Pragma: \"no-cache\", Expires: 0, }); res.send(pdfBuffer); }}Step 7-8 Browser Page Pool with PuppeteerI have use a library puppeteer-page-pool to hold a finite number of pages within a embedded headless Chromium browser . I have also tried using browser pool as well. But for the application of PDF generation , a page pool will be sufficient and more efficient. Note the Page Pool also wraps puppeteer library within it.class BrowserPagePool { private static pool; static async create() { const args = [ \"--autoplay-policy=user-gesture-required\", \"--disable-background-networking\", \"--disable-background-timer-throttling\", ... ]; BrowserPagePool.pool = new PagePool({ poolOptions: { min: 2, max: 10, }, puppeteerOptions: { args: args, executablePath: process.env.CHROMIUM_PATH, headless: true, } }); await BrowserPagePool.pool.launch(); } async getPdfBuffer(callback) { if (!BrowserPagePool.pool) { await BrowserPagePool.create(); } let buffer; await BrowserPagePool.pool.process(async (page) =&gt; { buffer = await callback(page); }); return buffer; }; async shutdown() { if (BrowserPagePool.pool) await BrowserPagePool.pool.destroy(); }}Step 9 Exception FilterNest.js allows developers the flexibility to handle exception encountered during the HTTP response pipeline using filter. This is a place we can standadize the exception handling. It can be decorated at the Controller level such as UseFilters(MyFilter) . A fragment of code how I customize the exception handling are as follows: @Catch() export class AllExFilter implements ExceptionFilter { catch(exception: any, host: ArgumentsHost) { const ctx = host.switchToHttp(); const response = ctx.getResponse(); const request = ctx.getRequest(); const status = exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR; response.status(status).json({ statusCode: status, // timestamp: new Date().toISOString(), message: exception.message, }); } }" }, { "title": "Swagger, Body Validator, Handlebar Compilation", "url": "/posts/step-3-5/", "categories": "pdf-service", "tags": "swagger, body-validator, handlebar-compilation", "date": "2022-07-04 00:00:00 -0700", "snippet": "Step 3 Swagger APINest.js has a fantastic Swagger integration. The code the instrument Swagger sub-system is as follows: const swaggerConfig = new DocumentBuilder() .setTitle('ACME PDF Generator') .setDescription('PDF Generator API documentation') .setVersion('1.0') .addTag('pdf') .setContact('Justin Young', '', 'young@acme.io') .addServer('https://acme.com/api') .build(); const document = SwaggerModule.createDocument(app, swaggerConfig, { extraModels: ExtraModelList, }); SwaggerModule.setup('doc', app, document);The next step is to create DTO class that can model the input data. This step can be very tedious and they are done all through Nest/Swagger decorators.An example of the Sale Invoice V1 decorations is:@ApiExtraModels()export class Sales_Invoice_V1 extends BaseDataDto{ @IsObject() @IsNotEmpty() @ValidateNested() @Type(() =&gt; CompanyDto) @ApiProperty({ required: true }) company: CompanyDto; @IsObject() @IsNotEmpty() @ValidateNested() @Type(() =&gt; RecipientDto) @ApiProperty({ required: true }) recipient: RecipientDto; @IsObject() @IsNotEmpty() @ValidateNested() @Type(() =&gt; PurchasedDto) @ApiProperty({ required: true }) purchased: PurchasedDto; @ApiProperty({ required: true, type:'string', example: \"sales-invoice-v1\" }) @IsString() kind: \"sales-invoice-v1\";}Last you need to put the Swagger decorators at the PDF Controller (introduce in step 7). @ApiCreatedResponse({ description: \"PDF file has been generated\" }) @ApiHeaders(API_HEADERS) @ApiBody({ type: RootDataDto })A word of warning. Since the input in POST Body is normally composed of actually data extracted from legacy system , the structure can change quite frequently and it can be complex. Writing a accurate Swagger API that depicts the input format can be very tedious and perhaps impractical. But if the input data is relatives stable, the Swagger documentation can be very helpful to callers of the PDF Generator.Step 4 Body ValidatorIf one wants to take one step further, such as validating the structure of the input data before it goes further into the rendering pipeline, a JSON tree validator can be instrumented using class-validator package https://www.npmjs.com/package/class-validator. Refer to the typescript DTO class above. The use of validation decorators (below) will serve the purpose of scaffolding the validation mechanism.import { IsNumber, IsNotEmpty, IsString, ValidateNested, IsCurrency, IsInt, IsObject, IsArray } from 'class-validator';Same word of warning also that maintaining a tight validation on input JSON composed from legacy systems that can changed can be very time consuming.Step 5 Handlebars CompilationThe core PDF system use advanced Handlebars template mechanism to fuse input data into template code. Please read up the documentation https://handlebarsjs.comThere are two approaches to instrument Handlebars sub-system. I have done integrating the entire compilation process the Node’s engine mechanism, the other is a straight reading *.hbs files from designated directories and compile them. I’ve taken the later. I created a Handlebars services where I can pre-compile all *.hbs files at startup :@Injectable()export class HbsService { //call each request async compileToHTML(hbs: string, data) { return await HbsCore.compile(hbs, data); } //call once at system startup preCompileHbs(dir: string) { HbsCore.registerPartial(dir); } //call once at system startup registerHelper() { ... } ...}The goal of the HbsService is to pre-compile all the *.hbs files, register all the system reusable helper functions , and compile a final HTML file when the data arrives for each document.There are two places where helper functions are defined , one is the system helper functions reusable for every documents (loaded first at startup) and the other is document specific ones (load later at Interceptor activation). Thus, we have to make sure the document specific helper function names do not override the system ones already loaded.Handlebars Helper FunctionsThe Helper Functions are critical to the template system. There are plenty of third party libraries you can acquire to use. I have accumulated a list of shareable ones, note I used a convention to name Helper Functions starting with _xx.export const helpers = { _t: _t, _t_B: _t_B, _tn: _tn, _assign: _assign, _$: _$, _$_B: _$_B, _n: _n, _n_B: _n_B, _dt: _dt, _dt_B: _dt_B, _p: _p, _select: _select, _foreach: _foreach, _count: _count, _config: _config, _stringfy: _stringfy, _sumArray: _sumArray, _sum: _sum, _average: _average, _op: _op, _round: _round, _floor: _floor, _ceil: _ceil, _abs: _abs, _compare: _compare, _and: _and, _or: _or, _not: _not, _neither: _neither, _eq: _eq, _ne: _ne, _lt: _lt, _lte: _lte, _gte: _gte, _gt: _gt, _if: _if};There are two types of Helper Functions: expression and block . An example of the expression type is:function _average() { const len = arguments.length - 1; // const options = arguments[len]; let sum = 0, count = 0; for (let i = 0; i &lt; len; i++) { const e = arguments[i]; if (!isNaN(e)) { sum += Number(e); count++; } } return sum / count;};Where _average is used inside a *.hbs file , where arrayNum is an array of number pass into the Handlebars sub-system from the HTTP POST dataset.&lt;div&gt; {{_average arrayNum}} &lt;/div&gt;An example of the block Helper Function:function _count(size: number) { const { options } = check(\"_count\", 1, 1, arguments); const data = Handlebars.createFrame(options.data); let buffer = ''; for (let i = 0; i &lt; size; i++) { const item = { index: i + 1, total: size, isFirst: i === 0, isLast: i === (size - 1) }; data.index = i; buffer += options.fn(item, { data: data }); } return buffer;};Where _count is used inside a *.hbs file&lt;div&gt; {{#_count 4}} &lt;div&gt;{{this.index}}/{{this.total}}&lt;/div&gt; {{/_count}}&lt;/div&gt;" }, { "title": "JWT/Header Guard, Interceptor", "url": "/posts/step-1-2/", "categories": "pdf-service", "tags": "guard, interceptor, jwt-authentication", "date": "2022-07-03 00:00:00 -0700", "snippet": "Step 1a JWT GuardGuard is the first step in the pipeline of the HTTP POST that will be activated . It can be applied at the Controller level such as @UseGuards(JwtAuthGuard) and @UseGuards(HeaderGuard) . It is used mainly to authenticate the service and do pre-routing check. I utilize it to do JWT authentication as well as Headers well-form-ness check. The implementation of Guard decorator is very boiler-plated. For JWT authentication , I use the integrated Passport package comes with Nest.js. Since this is a micro service, the token is typically generated and given to a consuming client system, similar to how we use github application token.Below is JWT Guard:@Injectable()export class JwtAuthGuard extends AuthGuard('jwt'){ }JWT Guard must use the companion strategy object.@Injectable()export class JwtStrategy extends PassportStrategy(Strategy) { constructor() { super({ secretOrKey: SECRET, //come from process.env ignoreExpiration: false, jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), }); } async validate(payload: any) { return { domain: payload.name, }; }}Step 1b Header GuardBelow I list portion of the source code on my Header Validation Guard.@Injectable()export class HeaderGuard implements CanActivate { canActivate( context: ExecutionContext, ): boolean | Promise&lt;boolean&gt; | Observable&lt;boolean&gt; { // console.log(\"guard\"); const req = context.switchToHttp().getRequest(); const headers = req.headers; // const path = getHeader(\"path\", req.headers); const my_tz = getHeader(\"my-tz\", headers); const curr = getHeader(\"my-$\", headers, \"USD\"); const locale = getHeader(\"accept-language\", headers, \"en-us\"); if (my_tz) { if (!moment.tz.zone(my_tz)) { throw new HttpException(\"Invalid header value: my-tz\", HttpStatus.BAD_REQUEST); } } else { throw new HttpException(\"Missing header: my-tz\", HttpStatus.BAD_REQUEST); } ... return true; }Step 2 InterceptorAfter the Guards are activated, follows are Interceptors. It can be applied at the Controller level such as @UseInterceptors(MyInterceptor) . This is the place where I attempt to load document specific Handlebars Helper Functions from the document directory code/ext.js . The separation of shared system Helper Functions vs document customization is necessary because otherwise it can pollute other document by carrying the unused logics and name spaces to the global level. A fragment of the implementation is as follows:@Injectable()export class ExtInterceptor implements NestInterceptor { constructor(private loaderService: LoaderService) { } async intercept(context: ExecutionContext, next: CallHandler): Promise&lt;Observable&lt;any&gt;&gt; { // console.log(\"interceptor\"); const req = context.switchToHttp().getRequest(); const path = req.headers[\"path\"]; if (!path) { throw new HttpException(\"Missing header: path\", HttpStatus.BAD_REQUEST); } ... // loading extension try { await this.loaderService.load(path, req); } catch (e) { throw new HttpException(`Load extension exception: ${e.message}`, HttpStatus.BAD_REQUEST); } ... return next.handle(); }}" }, { "title": "Architecture of PDF generator", "url": "/posts/architecture/", "categories": "pdf-service", "tags": "architecture, http-clients, document-path, input-data, micro-service", "date": "2022-07-02 00:00:00 -0700", "snippet": "DiagramNode vs Nest vs Micro-Service(#10) Nest.js is a wonderful backend library layered on top of Node. Nest.js is modeled after Angular’s constructs and use of decorators but applied at the backend. It will greatly structure your code to be more understandable and neat. The entire PDF generator is a great example of creating a really sophisticated Micro Service which only job is taking a complex JSON tree, fusing it will a collection of pre-built templates, generating a final HTML and rendering it in PDF.HTTP Client &amp; HeadersOn the left side, it indicates a HTTP client, such as POSTMAN or a simple CURL command will contact the PDF generator via a RESTFUL API (e.g. CURL -x POST https://localhost/pdf). The caller needs to prepare the right HTTP Headers and a JSON tree encoded in the POST Body. A example of the headers are self-explanatory as follows: Path of the document templatesThe path header specifies a local directory accessible by Node and it can container multiple types of documents and multiple versions. These directories consist of Handlebars Partial in the form of *.hbs files. The directory can also include a code/ext.ts file that contains Handlebars Helper Functions specific to the document and not shareable elsewhere:Data needed for renderingThe data need to render the PDF is supplied in the body of the HTTP POST. An example can be as follows; { \"data\":{ \"company\": { \"address\": \"181 Suburban Road, San Luis OBsipo, CA 93401\", \"phone\": \"800-883-6647\", \"fax\": \"800-883-6648\", \"invoiceNum\": \"32321\", \"image2\": \"http://localhost:8000/rf2.png\", \"image\":\"http://localhost:8000/rf1.png\" }, \"recipient\":{ \"to\":{ \"name\": \"John Donahoe\", \"companyName\": \"Nike Inc.\", \"streetAddress\":\"One Bowerman Dr\", \"city\":\"Beaverton\", \"state\":\"OR\", \"zip\":\"97005\", \"phone\":\"(503) 671-6453\" }, \"shipTo\":{ \"name\": \"Nike Company Store\", \"companyName\": \"Nike Inc.\", \"streetAddress\":\"3485 SW Knowlton Rd\", \"city\":\"Beaverton\", \"state\":\"OR\", \"zip\":\"97005\", \"phone\":\"(503) 671-1600\" }, \"instruction\":\"Rush delivery, including weekends\" }, \"purchased\":{ \"items\": [ { \"quantity\": 10, \"description\": \"Wilson Pro Staff RF 97 V13 Federer Autograph Tennis Racquet - Quality String (4-1/2) RF97\", \"unitPrice\": 279.00 }, { \"quantity\": 20, \"description\": \"Roger's T12 Grey/Mint\", \"unitPrice\": 89.00 } , { \"quantity\": 150, \"description\": \"Roger That Shirt - Funny Tennis T Shirt\", \"unitPrice\": 16.99 }, { \"quantity\": 25, \"description\": \"ON The Roger Clubhouse Metal/Black Men's Shoe\", \"unitPrice\": 149.99 }, { \"quantity\": 100, \"description\": \"Roger Federer Trucker Hat for Men Women Medium Profile Adjustable Classic Tennis\", \"unitPrice\": 15.99 }, { \"quantity\": 75, \"description\": \"Roger Federer: The Biography Hardcover\", \"unitPrice\": 30.71 }, { \"quantity\": 210, \"description\": \"Letter Embroidery 3D F Dad Hat Tennis Star Roger Federer Baseball Cap Black Adult Size\", \"unitPrice\": 16.00 }, { \"quantity\": 320, \"description\": \"Welerony Home Coffee Mug Roger-federer-logo Interesting 330ml Mug Ceramic Coffee Mug Teacup\", \"unitPrice\": 19.88 }, { \"quantity\": 1100, \"description\": \"Phone Case Roger Federer Compatible with iPhone 12/13 Pro Max 13 Mini 11 Pro max XR SE 2020/7/8 X/Xs 7 8 6/6S Plus Samsung S21+ Ultra\", \"unitPrice\": 21.00 }, { \"quantity\": 37, \"description\": \"Wilson RF DNA 12 pack Tennis Bag - Black\", \"unitPrice\": 7.99 }, { \"quantity\": 70, \"description\": \"Roger Federer: The Greatest\", \"unitPrice\": 199.00 }, { \"quantity\": 430, \"description\": \"Roger Federer ArcDecals78601050 Set of Two (2X), Decal, Sticker, Laptop, Ipad, Car, Truck\", \"unitPrice\": 4.90 } , { \"quantity\": 1100, \"description\": \"ROGER FEDERER RF Tennis Racket Vibration Dampeners (4 Pack), Decal, Sticker, Laptop, Ipad, Car, Truck\", \"unitPrice\": 14.99 } , { \"quantity\": 35, \"description\": \"Uniqlo ROGER FEDERER DRY-EX POLO SHIRT MEN (S-XL) 2021 Qatar Dubai Open NWT NEW\", \"unitPrice\": 69.00 } , { \"quantity\": 40, \"description\": \"UNIQLO 2021 Roger Federer French Open Dry-EX Shorts (WHITE) USA\", \"unitPrice\": 89.99 } , { \"quantity\": 2, \"description\": \"New Wilson Pro Staff 97 Autograph Roger Federer RF97 4 3/8 Racket BLACK\", \"unitPrice\": 500 } , { \"quantity\": 25, \"description\": \"Uniqlo Roger Federer Hat Cap 2021 French OPEN Brand New Tennis\", \"unitPrice\": 45 }, { \"quantity\": 24, \"description\": \"Uniqlo Roger Federer French Open 2021 White Red Tennis Shorts - New with tags RF\", \"unitPrice\": 85 } , { \"quantity\": 89, \"description\": \"UNIQLO RF ROGER FEDERER WIMBLEDON TENNIS SOCKS 1 PAIR NWT\", \"unitPrice\": 24.99 } ], \"salesTax\": 0.07, \"shippingHandling\": 1119 } }, \"kind\":\"sales.invoice.v1\"}Next …In the next few postings, I will detail the sequence of actions, step #1 to step #9, once the HTTP enter into the PDF generator until a PDF is returned to the calling client.Reference pipeline diagram from Nest.js" }, { "title": "Introduction PDF Service", "url": "/posts/intro/", "categories": "pdf-service", "tags": "nest.js, node, handlebars, puppeteer", "date": "2022-07-01 00:00:00 -0700", "snippet": "Welcome to my advanced Node journeyMany asked me what is the big deal of a modern PDF generator service; they exist for a long time and is a commodity. Many companies use lower level native PDF libraries/API to compose documents. This approach works but suffers from far less flexibility when the source data changes. Companies often take weeks to accommodate changes.What is Justin’s PDF Service? It can take in arbitrary different complex data sets. It can inject sophisticated business logic! in minutes. It provides a flexible structure in managing and generating hundred of different types of documents. Already deployed in North America &amp; Europe in large scale.A Trendy Approach:One of the latest of PDF generation uses a templating engine Handlebars and Puppeteer on Node and Nest. js. You can find various examples of this solution in the Internet. However, to put a systems in place that is worthy of large scale production, it is a journey surprisingly tedious if not difficult.The Benefits: Modular separation of of document composition using various hbs files is critical for complex document implementation. Templating and data separation provides a clean Model-View mechanism. Perhaps the most important feature is we can implement complex business logic to accommodate or transform input data whenever needed through the Handlebars’ custom helper functions. Instead of taking weeks to accommodate changes, now it takes minutes!!!Tech Stack : Node Nest.js Handlebar i18n PuppeteerRequirements:The PDF generator has the following requirements: Stateless, meaning it will only take in input as HTTP Post Body in json form. Then output a rendered PDF. Multi-Lingual, needs to support multiple language simultaneously. Multi-Timezones, needs to support whichever browser’s timezone requesting the PDF and display all time to local time. Multi-Currencies, needs to display in different currencies simultaneously. Performant, needs to render a complex PDF within 2 seconds. Scalable, needs to be able to spawn hundred or thousands of PDF generator to service heavy traffic demand.Results:I architected and implement a solution that met all requirements. It was such a success it was deployed throughout a larger international brand company in North America and Europe in less than 10 months.Disclaimer:The solution I implemented worked remarkably well for my previous company. But it is a bandage of many hours of Googling various bits and pieces of information.I thought I need to completely rethink and restructure how a more elegant solution can be. After I left the company, I re-implemented a brand new system from scratch in clean room fashion. I took the conceptual learnings and implemented an even more superior system. Throughout this blog, I will show fragments of new clean code without any prior copyright violation.The code I created is NOT open source, but I want to share my experience from a higher level perspective." } ]
