<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Justin's</title><subtitle>Share experience of creating a modern PDF service using Nest.js/Handlebar/Puppeteer.</subtitle> <updated>2022-07-22T15:55:55-07:00</updated> <author> <name>Justin Young</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> Â© 2022 Justin Young </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Testing &amp; Results</title><link href="/posts/testing/" rel="alternate" type="text/html" title="Testing &amp; Results" /><published>2022-07-08T00:00:00-07:00</published> <updated>2022-07-21T01:31:59-07:00</updated> <id>/posts/testing/</id> <content src="/posts/testing/" /> <author> <name>Justin Young</name> </author> <category term="pdf-service" /> <summary> Setup I use jest for all my unit tests and end-to-end test. In the package.json add "scripts": { "test": "jest --config ./test/unit-test/jest-unit.json", "test:e2e": "jest --config ./test/e2e-test/jest-e2e.json" } There are few critical techniques I used: I do not use any mockup in my test, instead, I use the same PDF Generator engine but feed reference test data. So the port of testing ... </summary> </entry> <entry><title>Scalability</title><link href="/posts/scale/" rel="alternate" type="text/html" title="Scalability" /><published>2022-07-07T00:00:00-07:00</published> <updated>2022-07-21T01:31:59-07:00</updated> <id>/posts/scale/</id> <content src="/posts/scale/" /> <author> <name>Justin Young</name> </author> <category term="pdf-service" /> <summary> How Node application scale Node is a hybrid when it comes to concurrency. At the programmer level it is a single threaded model utilizing system event loops and non-blocking IO to handle larger number of requests. When a request comes in, the event is put into the system event queue. Then the request will be put to sleep. Meanwhile the main thread can take other request or process the event... </summary> </entry> <entry><title>Localization, PDF-Footer</title><link href="/posts/i18n/" rel="alternate" type="text/html" title="Localization, PDF-Footer" /><published>2022-07-06T00:00:00-07:00</published> <updated>2022-07-21T01:31:59-07:00</updated> <id>/posts/i18n/</id> <content src="/posts/i18n/" /> <author> <name>Justin Young</name> </author> <category term="pdf-service" /> <summary> Localization One of the more difficult task is to setup multi-lingo support for the PDF Generator while at the same time work with the Handlebars template engine. There is not a lot of documentation around to illustrate it. Setup At the bootstrapping function of Node, we import i18n and configure as follows: import * as i18n from 'i18n'; export async function bootstrap(port?: number) { i18n... </summary> </entry> <entry><title>Controller, Browser Page Pool, Puppeteer , Exception Filter</title><link href="/posts/step-6-9/" rel="alternate" type="text/html" title="Controller, Browser Page Pool, Puppeteer , Exception Filter" /><published>2022-07-05T00:00:00-07:00</published> <updated>2022-07-22T15:52:58-07:00</updated> <id>/posts/step-6-9/</id> <content src="/posts/step-6-9/" /> <author> <name>Justin Young</name> </author> <category term="pdf-service" /> <summary> Step 6 Controller The heart of he PDF Generator is driven by the PDF Controller. In Nest.js , you use annotation to designate a function as a controller where HTTP request will be routed to. You can see all the decorators we mentioned before are used either on the class or the method or the parameters of the Controller. @UseGuards(JwtAuthGuard) @UseGuards(HeaderGuard) @UseInterceptors(ExtInterc... </summary> </entry> <entry><title>Swagger, Body Validator, Handlebar Compilation</title><link href="/posts/step-3-5/" rel="alternate" type="text/html" title="Swagger, Body Validator, Handlebar Compilation" /><published>2022-07-04T00:00:00-07:00</published> <updated>2022-07-21T01:31:59-07:00</updated> <id>/posts/step-3-5/</id> <content src="/posts/step-3-5/" /> <author> <name>Justin Young</name> </author> <category term="pdf-service" /> <summary> Step 3 Swagger API Nest.js has a fantastic Swagger integration. The code the instrument Swagger sub-system is as follows: const swaggerConfig = new DocumentBuilder() .setTitle('ACME PDF Generator') .setDescription('PDF Generator API documentation') .setVersion('1.0') .addTag('pdf') .setContact('Justin Young', '', 'young@acme.io') .addServer('https://acme.com/api') .... </summary> </entry> </feed>
